<#
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.

Code generated by Microsoft (R) PSSwagger
Changes may cause incorrect behavior and will be lost if the code is regenerated.
#>

<#
.SYNOPSIS
    Create a new platform image reposity from a given image configuration.

.DESCRIPTION
    Creates a new platform image.

.PARAMETER Sku
    Name of the SKU.

.PARAMETER OsDisk
    Operating system used for this platform image.

.PARAMETER Details
    Information about the image.

.PARAMETER DataDisks
    Data disks used by the platform image.

.PARAMETER Version
    The version of the virtual machine image.

.PARAMETER Offer
    Name of the offer.

.PARAMETER ResourceId
    The resource id.

.PARAMETER LocationName
    Location of the resource.

.PARAMETER Publisher
    Name of the publisher.

.PARAMETER InputObject
    The input object of type Microsoft.AzureStack.Management.Compute.Admin.Models.PlatformImage.

#>
function New-AzsComputePlatformImage {
    [OutputType([Microsoft.AzureStack.Management.Compute.Admin.Models.PlatformImage])]
    [CmdletBinding(DefaultParameterSetName = 'PlatformImages_Create')]
    param(
        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Sku,

        [Parameter(Mandatory = $true)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.OsDisk]
        $OSDisk,

        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.DataDisk[]]
        $DataDisks,

        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.ImageDetails]
        $Details,

        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Version,

        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Offer,

        [Parameter(Mandatory = $false, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Location,

        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Publisher,

        [Parameter(Mandatory = $false)]
        [switch]
        $AsJob
    )

    Begin {
        Initialize-PSSwaggerDependencies -Azure
        $tracerObject = $null
        if (('continue' -eq $DebugPreference) -or ('inquire' -eq $DebugPreference)) {
            $oldDebugPreference = $global:DebugPreference
            $global:DebugPreference = "continue"
            $tracerObject = New-PSSwaggerClientTracing
            Register-PSSwaggerClientTracing -TracerObject $tracerObject
        }
    }

    Process {

        $ErrorActionPreference = 'Stop'

        $NewServiceClient_params = @{
            FullClientTypeName = 'Microsoft.AzureStack.Management.Compute.Admin.ComputeAdminClient'
        }

        $GlobalParameterHashtable = @{}
        $NewServiceClient_params['GlobalParameterHashtable'] = $GlobalParameterHashtable

        $GlobalParameterHashtable['SubscriptionId'] = $null
        if ($PSBoundParameters.ContainsKey('SubscriptionId')) {
            $GlobalParameterHashtable['SubscriptionId'] = $PSBoundParameters['SubscriptionId']
        }

        $ComputeAdminClient = New-ServiceClient @NewServiceClient_params

        # Create object
        $flattenedParameters = @('DataDisks', 'OsDisk', 'Details')
        $utilityCmdParams = @{}
        $flattenedParameters | ForEach-Object {
            if ($PSBoundParameters.ContainsKey($_)) {
                $utilityCmdParams[$_] = $PSBoundParameters[$_]
            }
        }
        $NewImage = New-PlatformImageParametersObject @utilityCmdParams

        if ( -not $PSBoundParameters.ContainsKey('Location')) {
            $Location = (Get-AzureRMLocation).Location
        }

        if ('PlatformImages_Create' -eq $PsCmdlet.ParameterSetName) {
            Write-Verbose -Message 'Performing operation CreateWithHttpMessagesAsync on $ComputeAdminClient.'
            $TaskResult = $ComputeAdminClient.PlatformImages.CreateWithHttpMessagesAsync($Location, $Publisher, $Offer, $Sku, $Version, $NewImage)
        } else {
            Write-Verbose -Message 'Failed to map parameter set to operation method.'
            throw 'Module failed to find operation to execute.'
        }

        Write-Verbose -Message "Waiting for the operation to complete."

        $PSSwaggerJobScriptBlock = {
            [CmdletBinding()]
            param(
                [Parameter(Mandatory = $true)]
                [System.Threading.Tasks.Task]
                $TaskResult,

                [Parameter(Mandatory = $true)]
                [string]
                $TaskHelperFilePath
            )
            if ($TaskResult) {
                . $TaskHelperFilePath
                $GetTaskResult_params = @{
                    TaskResult = $TaskResult
                }

                Get-TaskResult @GetTaskResult_params

            }
        }

        $PSCommonParameters = Get-PSCommonParameter -CallerPSBoundParameters $PSBoundParameters
        $TaskHelperFilePath = Join-Path -Path $ExecutionContext.SessionState.Module.ModuleBase -ChildPath 'Get-TaskResult.ps1'
        if ($AsJob) {
            $ScriptBlockParameters = New-Object -TypeName 'System.Collections.Generic.Dictionary[string,object]'
            $ScriptBlockParameters['TaskResult'] = $TaskResult
            $ScriptBlockParameters['AsJob'] = $AsJob
            $ScriptBlockParameters['TaskHelperFilePath'] = $TaskHelperFilePath
            $PSCommonParameters.GetEnumerator() | ForEach-Object { $ScriptBlockParameters[$_.Name] = $_.Value }

            Start-PSSwaggerJobHelper -ScriptBlock $PSSwaggerJobScriptBlock `
                -CallerPSBoundParameters $ScriptBlockParameters `
                -CallerPSCmdlet $PSCmdlet `
                @PSCommonParameters
        } else {
            Invoke-Command -ScriptBlock $PSSwaggerJobScriptBlock `
                -ArgumentList $TaskResult, $TaskHelperFilePath `
                @PSCommonParameters
        }
    }

    End {
        if ($tracerObject) {
            $global:DebugPreference = $oldDebugPreference
            Unregister-PSSwaggerClientTracing -TracerObject $tracerObject
        }
    }
}

